-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module GitHub.Enum.EnterpriseOrderField exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Properties by which enterprise connections can be ordered.

  - Name - Order enterprises by name

-}
type EnterpriseOrderField
    = Name


list : List EnterpriseOrderField
list =
    [ Name ]


decoder : Decoder EnterpriseOrderField
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "NAME" ->
                        Decode.succeed Name

                    _ ->
                        Decode.fail ("Invalid EnterpriseOrderField type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : EnterpriseOrderField -> String
toString enum =
    case enum of
        Name ->
            "NAME"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe EnterpriseOrderField
fromString enumString =
    case enumString of
        "NAME" ->
            Just Name

        _ ->
            Nothing
